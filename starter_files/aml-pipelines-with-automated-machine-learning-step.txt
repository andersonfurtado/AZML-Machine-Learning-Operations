{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Copyright (c) Microsoft Corporation. All rights reserved.  \n",
        "Licensed under the MIT License."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "![Impressions](https://PixelServer20190423114238.azurewebsites.net/api/impressions/NotebookVM/how-to-use-azureml/machine-learning-pipelines/intro-to-pipelines/aml-pipelines-with-automated-machine-learning-step.png)"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Azure Machine Learning Pipeline with AutoMLStep (Udacity Course 2)\n",
        "This notebook demonstrates the use of AutoMLStep in Azure Machine Learning Pipeline."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Introduction\n",
        "In this example we showcase how you can use AzureML Dataset to load data for AutoML via AML Pipeline. \n",
        "\n",
        "If you are using an Azure Machine Learning Notebook VM, you are all set. Otherwise, make sure you have executed the [configuration](https://aka.ms/pl-config) before running this notebook.\n",
        "\n",
        "In this notebook you will learn how to:\n",
        "1. Create an `Experiment` in an existing `Workspace`.\n",
        "2. Create or Attach existing AmlCompute to a workspace.\n",
        "3. Define data loading in a `TabularDataset`.\n",
        "4. Configure AutoML using `AutoMLConfig`.\n",
        "5. Use AutoMLStep\n",
        "6. Train the model using AmlCompute\n",
        "7. Explore the results.\n",
        "8. Test the best fitted model."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Azure Machine Learning and Pipeline SDK-specific imports"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import os\n",
        "import csv\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "import pkg_resources\n",
        "\n",
        "import azureml.core\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.core.workspace import Workspace\n",
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.dataset import Dataset\n",
        "\n",
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "# Check core SDK version number\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SDK version: 1.18.0\n"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1607652267494
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Initialize Workspace\n",
        "Initialize a workspace object from persisted configuration. Make sure the config file is present at .\\config.json"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "print(ws.name, ws.resource_group, ws.location, ws.subscription_id, sep = '\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WML\n",
            "RGML\n",
            "eastus\n",
            "7fd26112-9993-4423-b5d3-83ab3e0aeae4\n"
          ]
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1607652273032
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create an Azure ML experiment\n",
        "Let's create an experiment named \"automlstep-classification\" and a folder to hold the training scripts. The script runs will be recorded under the experiment in Azure.\n",
        "\n",
        "The best practice is to use separate folders for scripts and its dependent files for each step and specify that folder as the `source_directory` for the step. This helps reduce the size of the snapshot created for the step (only the specific folder is snapshotted). Since changes in any files in the `source_directory` would trigger a re-upload of the snapshot, this helps keep the reuse of the step when there are no changes in the `source_directory` of the step.\n",
        "\n",
        "*Udacity Note:* There is no need to create an Azure ML experiment, this needs to re-use the experiment that was already created\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose a name for the run history container in the workspace.\n",
        "# NOTE: update these to match your existing experiment name\n",
        "experiment_name = 'Experiment-bankmarketing'\n",
        "project_folder = './pipeline-project'\n",
        "\n",
        "experiment = Experiment(ws, experiment_name)\n",
        "experiment"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "Experiment(Name: Experiment-bankmarketing,\nWorkspace: WML)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Workspace</th><th>Report Page</th><th>Docs Page</th></tr><tr><td>Experiment-bankmarketing</td><td>WML</td><td><a href=\"https://ml.azure.com/experiments/Experiment-bankmarketing?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.experiment.Experiment?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1607652274223
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create or Attach an AmlCompute cluster\n",
        "You will need to create a [compute target](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#compute-target) for your AutoML run. In this tutorial, you get the default `AmlCompute` as your training compute resource.\n",
        "\n",
        "**Udacity Note** There is no need to create a new compute target, it can re-use the previous cluster"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import AmlCompute\n",
        "from azureml.core.compute import ComputeTarget\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# NOTE: update the cluster name to match the existing cluster\n",
        "# Choose a name for your CPU cluster\n",
        "amlcompute_cluster_name = \"compute-cluster\"\n",
        "\n",
        "# Verify that cluster does not exist already\n",
        "try:\n",
        "    compute_target = ComputeTarget(workspace=ws, name=amlcompute_cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2',# for GPU, use \"STANDARD_NC6\"\n",
        "                                                           #vm_priority = 'lowpriority', # optional\n",
        "                                                           max_nodes=4)\n",
        "    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, compute_config)\n",
        "\n",
        "compute_target.wait_for_completion(show_output=True, min_node_count = 1, timeout_in_minutes = 10)\n",
        "# For a more detailed view of current AmlCompute status, use get_status()."
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing cluster, use it.\n",
            "Succeeded..................................................................................................................\n",
            "AmlCompute wait for completion finished\n",
            "\n",
            "Wait timeout has been reached\n",
            "Current provisioning state of AmlCompute is \"Succeeded\" and current node count is \"0\"\n"
          ]
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1607652876761
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data\n",
        "\n",
        "**Udacity note:** Make sure the `key` is the same name as the dataset that is uploaded, and that the description matches. If it is hard to find or unknown, loop over the `ws.datasets.keys()` and `print()` them.\n",
        "If it *isn't* found because it was deleted, it can be recreated with the link that has the CSV "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\n",
        "# NOTE: update the key to match the dataset name\n",
        "found = False\n",
        "key = \"bankmarketing_train\"\n",
        "description_text = \"Bank Marketing DataSet for Udacity Course 2\"\n",
        "\n",
        "if key in ws.datasets.keys(): \n",
        "        found = True\n",
        "        dataset = ws.datasets[key] \n",
        "\n",
        "if not found:\n",
        "        # Create AML Dataset and register it into Workspace\n",
        "        example_data = 'https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_train.csv'\n",
        "        dataset = Dataset.Tabular.from_delimited_files(example_data)        \n",
        "        #Register Dataset in Workspace\n",
        "        dataset = dataset.register(workspace=ws,\n",
        "                                   name=key,\n",
        "                                   description=description_text)\n",
        "\n",
        "\n",
        "df = dataset.to_pandas_dataframe()\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "                age      duration      campaign         pdays      previous  \\\ncount  32950.000000  32950.000000  32950.000000  32950.000000  32950.000000   \nmean      40.040212    257.335205      2.561730    962.174780      0.174780   \nstd       10.432313    257.331700      2.763646    187.646785      0.496503   \nmin       17.000000      0.000000      1.000000      0.000000      0.000000   \n25%       32.000000    102.000000      1.000000    999.000000      0.000000   \n50%       38.000000    179.000000      2.000000    999.000000      0.000000   \n75%       47.000000    318.000000      3.000000    999.000000      0.000000   \nmax       98.000000   4918.000000     56.000000    999.000000      7.000000   \n\n       emp.var.rate  cons.price.idx  cons.conf.idx     euribor3m   nr.employed  \ncount  32950.000000    32950.000000   32950.000000  32950.000000  32950.000000  \nmean       0.076228       93.574243     -40.518680      3.615654   5166.859608  \nstd        1.572242        0.578636       4.623004      1.735748     72.208448  \nmin       -3.400000       92.201000     -50.800000      0.634000   4963.600000  \n25%       -1.800000       93.075000     -42.700000      1.344000   5099.100000  \n50%        1.100000       93.749000     -41.800000      4.857000   5191.000000  \n75%        1.400000       93.994000     -36.400000      4.961000   5228.100000  \nmax        1.400000       94.767000     -26.900000      5.045000   5228.100000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>emp.var.rate</th>\n      <th>cons.price.idx</th>\n      <th>cons.conf.idx</th>\n      <th>euribor3m</th>\n      <th>nr.employed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.040212</td>\n      <td>257.335205</td>\n      <td>2.561730</td>\n      <td>962.174780</td>\n      <td>0.174780</td>\n      <td>0.076228</td>\n      <td>93.574243</td>\n      <td>-40.518680</td>\n      <td>3.615654</td>\n      <td>5166.859608</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10.432313</td>\n      <td>257.331700</td>\n      <td>2.763646</td>\n      <td>187.646785</td>\n      <td>0.496503</td>\n      <td>1.572242</td>\n      <td>0.578636</td>\n      <td>4.623004</td>\n      <td>1.735748</td>\n      <td>72.208448</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>17.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-3.400000</td>\n      <td>92.201000</td>\n      <td>-50.800000</td>\n      <td>0.634000</td>\n      <td>4963.600000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>32.000000</td>\n      <td>102.000000</td>\n      <td>1.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>-1.800000</td>\n      <td>93.075000</td>\n      <td>-42.700000</td>\n      <td>1.344000</td>\n      <td>5099.100000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>38.000000</td>\n      <td>179.000000</td>\n      <td>2.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>1.100000</td>\n      <td>93.749000</td>\n      <td>-41.800000</td>\n      <td>4.857000</td>\n      <td>5191.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>47.000000</td>\n      <td>318.000000</td>\n      <td>3.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>1.400000</td>\n      <td>93.994000</td>\n      <td>-36.400000</td>\n      <td>4.961000</td>\n      <td>5228.100000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>98.000000</td>\n      <td>4918.000000</td>\n      <td>56.000000</td>\n      <td>999.000000</td>\n      <td>7.000000</td>\n      <td>1.400000</td>\n      <td>94.767000</td>\n      <td>-26.900000</td>\n      <td>5.045000</td>\n      <td>5228.100000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1607652881412
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Review the Dataset Result\n",
        "\n",
        "You can peek the result of a TabularDataset at any range using `skip(i)` and `take(j).to_pandas_dataframe()`. Doing so evaluates only `j` records for all the steps in the TabularDataset, which makes it fast even against large datasets.\n",
        "\n",
        "`TabularDataset` objects are composed of a list of transformation steps (optional)."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.take(5).to_pandas_dataframe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "   age          job  marital    education  default housing loan    contact  \\\n0   57   technician  married  high.school       no      no  yes   cellular   \n1   55      unknown  married      unknown  unknown     yes   no  telephone   \n2   33  blue-collar  married     basic.9y       no      no   no   cellular   \n3   36       admin.  married  high.school       no      no   no  telephone   \n4   27    housemaid  married  high.school       no     yes   no   cellular   \n\n  month day_of_week  ...  campaign  pdays  previous     poutcome emp.var.rate  \\\n0   may         mon  ...         1    999         1      failure         -1.8   \n1   may         thu  ...         2    999         0  nonexistent          1.1   \n2   may         fri  ...         1    999         1      failure         -1.8   \n3   jun         fri  ...         4    999         0  nonexistent          1.4   \n4   jul         fri  ...         2    999         0  nonexistent          1.4   \n\n   cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n0          92.893          -46.2      1.299       5099.1  no  \n1          93.994          -36.4      4.860       5191.0  no  \n2          92.893          -46.2      1.313       5099.1  no  \n3          94.465          -41.8      4.967       5228.1  no  \n4          93.918          -42.7      4.963       5228.1  no  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>contact</th>\n      <th>month</th>\n      <th>day_of_week</th>\n      <th>...</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>poutcome</th>\n      <th>emp.var.rate</th>\n      <th>cons.price.idx</th>\n      <th>cons.conf.idx</th>\n      <th>euribor3m</th>\n      <th>nr.employed</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>57</td>\n      <td>technician</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>cellular</td>\n      <td>may</td>\n      <td>mon</td>\n      <td>...</td>\n      <td>1</td>\n      <td>999</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>-1.8</td>\n      <td>92.893</td>\n      <td>-46.2</td>\n      <td>1.299</td>\n      <td>5099.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>55</td>\n      <td>unknown</td>\n      <td>married</td>\n      <td>unknown</td>\n      <td>unknown</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>telephone</td>\n      <td>may</td>\n      <td>thu</td>\n      <td>...</td>\n      <td>2</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.1</td>\n      <td>93.994</td>\n      <td>-36.4</td>\n      <td>4.860</td>\n      <td>5191.0</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>33</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>basic.9y</td>\n      <td>no</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>may</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>1</td>\n      <td>999</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>-1.8</td>\n      <td>92.893</td>\n      <td>-46.2</td>\n      <td>1.313</td>\n      <td>5099.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>36</td>\n      <td>admin.</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>no</td>\n      <td>no</td>\n      <td>telephone</td>\n      <td>jun</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>4</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.4</td>\n      <td>94.465</td>\n      <td>-41.8</td>\n      <td>4.967</td>\n      <td>5228.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27</td>\n      <td>housemaid</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>jul</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>2</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.4</td>\n      <td>93.918</td>\n      <td>-42.7</td>\n      <td>4.963</td>\n      <td>5228.1</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1607652881560
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train\n",
        "This creates a general AutoML settings object.\n",
        "**Udacity notes:** These inputs must match what was used when training in the portal. `label_column_name` has to be `y` for example."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "automl_settings = {\n",
        "    \"experiment_timeout_minutes\": 20,\n",
        "    \"max_concurrent_iterations\": 5,\n",
        "    \"primary_metric\" : 'AUC_weighted'\n",
        "}\n",
        "automl_config = AutoMLConfig(compute_target=compute_target,\n",
        "                             task = \"classification\",\n",
        "                             training_data=dataset,\n",
        "                             label_column_name=\"y\",   \n",
        "                             path = project_folder,\n",
        "                             enable_early_stopping= True,\n",
        "                             featurization= 'auto',\n",
        "                             debug_log = \"automl_errors.log\",\n",
        "                             **automl_settings\n",
        "                            )"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1607652881645
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Create Pipeline and AutoMLStep\n",
        "\n",
        "You can define outputs for the AutoMLStep using TrainingOutput."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import PipelineData, TrainingOutput\n",
        "\n",
        "ds = ws.get_default_datastore()\n",
        "metrics_output_name = 'metrics_output'\n",
        "best_model_output_name = 'best_model_output'\n",
        "\n",
        "metrics_data = PipelineData(name='metrics_data',\n",
        "                           datastore=ds,\n",
        "                           pipeline_output_name=metrics_output_name,\n",
        "                           training_output=TrainingOutput(type='Metrics'))\n",
        "model_data = PipelineData(name='model_data',\n",
        "                           datastore=ds,\n",
        "                           pipeline_output_name=best_model_output_name,\n",
        "                           training_output=TrainingOutput(type='Model'))"
      ],
      "outputs": [],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1607652882163
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create an AutoMLStep."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "automl_step = AutoMLStep(\n",
        "    name='automl_module',\n",
        "    automl_config=automl_config,\n",
        "    outputs=[metrics_data, model_data],\n",
        "    allow_reuse=True)"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {
        "tags": [
          "automlstep-remarks-sample1"
        ],
        "gather": {
          "logged": 1607652882263
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import Pipeline\n",
        "pipeline = Pipeline(\n",
        "    description=\"pipeline_with_automlstep\",\n",
        "    workspace=ws,    \n",
        "    steps=[automl_step])"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {
        "tags": [
          "automlstep-remarks-sample2"
        ],
        "gather": {
          "logged": 1607652883439
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run = experiment.submit(pipeline)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created step automl_module [320b0425][0f2e1dad-a38f-4a18-aad6-840fd70e45cf], (This step will run and generate new outputs)\n",
            "Submitted PipelineRun 3e7fba9c-9b56-436c-a98e-e268864b25d3\n",
            "Link to Azure Machine Learning Portal: https://ml.azure.com/experiments/Experiment-bankmarketing/runs/3e7fba9c-9b56-436c-a98e-e268864b25d3?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\n"
          ]
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1607652885987
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\n",
        "RunDetails(pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "10f6039641d44c60acbd1a4491ccdcdb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/experiments/Experiment-bankmarketing/runs/3e7fba9c-9b56-436c-a98e-e268864b25d3?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\", \"run_id\": \"3e7fba9c-9b56-436c-a98e-e268864b25d3\", \"run_properties\": {\"run_id\": \"3e7fba9c-9b56-436c-a98e-e268864b25d3\", \"created_utc\": \"2020-12-11T02:14:44.494949Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"SDK\", \"runType\": \"SDK\", \"azureml.parameters\": \"{}\"}, \"tags\": {\"azureml.pipelineComponent\": \"pipelinerun\"}, \"end_time_utc\": \"2020-12-11T02:47:41.150734Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.3e7fba9c-9b56-436c-a98e-e268864b25d3/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=P9bJLAkHoI8WuXituYczlEjfajHBeLK5QRDqfnMhRUQ%3D&st=2020-12-11T23%3A14%3A01Z&se=2020-12-12T07%3A24%3A01Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.3e7fba9c-9b56-436c-a98e-e268864b25d3/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=ZRQZrSrM5rdHiK8wCvNPNARjnYXY6G9Vnfd9jf%2B6f48%3D&st=2020-12-11T23%3A14%3A01Z&se=2020-12-12T07%3A24%3A01Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.3e7fba9c-9b56-436c-a98e-e268864b25d3/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=2Na0bWeWEdkHrll6zrQ9Rf1GWq98LjXSes%2FubYKYTEs%3D&st=2020-12-11T23%3A14%3A01Z&se=2020-12-12T07%3A24%3A01Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:32:56\"}, \"child_runs\": [{\"run_id\": \"b43c26ce-4d27-408b-a776-94843fa19e4e\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2020-12-11T02:15:09.960555Z\", \"created_time\": \"2020-12-11T02:14:50.328408Z\", \"end_time\": \"2020-12-11T02:46:15.813689Z\", \"duration\": \"0:31:25\", \"run_number\": 154, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2020-12-11T02:14:50.328408Z\", \"is_reused\": \"\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2020-12-11 02:14:50Z] Submitting 1 runs, first five are: 320b0425:b43c26ce-4d27-408b-a776-94843fa19e4e\\n[2020-12-11 02:47:40Z] Completing processing run id b43c26ce-4d27-408b-a776-94843fa19e4e.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"1495e429\": {\"node_id\": \"1495e429\", \"name\": \"bankmarketing_train\"}}, \"module_nodes\": {\"320b0425\": {\"node_id\": \"320b0425\", \"name\": \"automl_module\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"b43c26ce-4d27-408b-a776-94843fa19e4e\"}}, \"edges\": [{\"source_node_id\": \"1495e429\", \"source_node_name\": \"bankmarketing_train\", \"source_name\": \"data\", \"target_name\": \"training_data\", \"dst_node_id\": \"320b0425\", \"dst_node_name\": \"automl_module\"}], \"child_runs\": [{\"run_id\": \"b43c26ce-4d27-408b-a776-94843fa19e4e\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2020-12-11T02:15:09.960555Z\", \"created_time\": \"2020-12-11T02:14:50.328408Z\", \"end_time\": \"2020-12-11T02:46:15.813689Z\", \"duration\": \"0:31:25\", \"run_number\": 154, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2020-12-11T02:14:50.328408Z\", \"is_reused\": \"\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.18.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1607652886337
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run.wait_for_completion()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PipelineRunId: 3e7fba9c-9b56-436c-a98e-e268864b25d3\n",
            "Link to Azure Machine Learning Portal: https://ml.azure.com/experiments/Experiment-bankmarketing/runs/3e7fba9c-9b56-436c-a98e-e268864b25d3?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\n",
            "PipelineRun Status: NotStarted\n",
            "PipelineRun Status: Running\n",
            "\n",
            "\n",
            "StepRunId: b43c26ce-4d27-408b-a776-94843fa19e4e\n",
            "Link to Azure Machine Learning Portal: https://ml.azure.com/experiments/Experiment-bankmarketing/runs/b43c26ce-4d27-408b-a776-94843fa19e4e?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\n",
            "StepRun( automl_module ) Status: NotStarted\n",
            "StepRun( automl_module ) Status: Running\n",
            "\n",
            "StepRun(automl_module) Execution Summary\n",
            "=========================================\n",
            "StepRun( automl_module ) Status: Finished\n",
            "{'runId': 'b43c26ce-4d27-408b-a776-94843fa19e4e', 'target': 'compute-cluster', 'status': 'Completed', 'startTimeUtc': '2020-12-11T02:15:09.960555Z', 'endTimeUtc': '2020-12-11T02:46:15.813689Z', 'properties': {'azureml.runsource': 'azureml.StepRun', 'ContentSnapshotId': '48892274-d433-4bd8-931e-4dc191d779fe', 'StepType': 'AutoMLStep', 'azureml.moduleid': '0f2e1dad-a38f-4a18-aad6-840fd70e45cf', 'azureml.nodeid': '320b0425', 'azureml.pipelinerunid': '3e7fba9c-9b56-436c-a98e-e268864b25d3', 'num_iterations': '1000', 'training_type': 'TrainFull', 'acquisition_function': 'EI', 'metrics': 'accuracy', 'primary_metric': 'AUC_weighted', 'train_split': '0', 'MaxTimeSeconds': None, 'acquisition_parameter': '0', 'num_cross_validation': None, 'target': 'compute-cluster', 'RawAMLSettingsString': None, 'AMLSettingsJsonString': '{\"path\": null, \"name\": \"placeholder\", \"subscription_id\": \"7fd26112-9993-4423-b5d3-83ab3e0aeae4\", \"resource_group\": \"RGML\", \"workspace_name\": \"WML\", \"region\": \"eastus\", \"compute_target\": \"compute-cluster\", \"spark_service\": null, \"azure_service\": null, \"_local_managed_run_id\": null, \"many_models\": false, \"pipeline_fetch_max_batch_size\": 1, \"iterations\": 1000, \"primary_metric\": \"AUC_weighted\", \"task_type\": \"classification\", \"data_script\": null, \"validation_size\": 0.0, \"n_cross_validations\": null, \"y_min\": null, \"y_max\": null, \"num_classes\": null, \"featurization\": \"auto\", \"_ignore_package_version_incompatibilities\": false, \"is_timeseries\": false, \"max_cores_per_iteration\": 1, \"max_concurrent_iterations\": 5, \"iteration_timeout_minutes\": null, \"mem_in_mb\": null, \"enforce_time_on_windows\": false, \"experiment_timeout_minutes\": 20, \"experiment_exit_score\": null, \"whitelist_models\": null, \"blacklist_algos\": null, \"supported_models\": [\"SVM\", \"SGD\", \"LinearSVM\", \"XGBoostClassifier\", \"KNN\", \"AveragedPerceptronClassifier\", \"TensorFlowLinearClassifier\", \"BernoulliNaiveBayes\", \"TensorFlowDNN\", \"MultinomialNaiveBayes\", \"RandomForest\", \"ExtremeRandomTrees\", \"LogisticRegression\", \"DecisionTree\", \"GradientBoosting\", \"LightGBM\"], \"auto_blacklist\": true, \"blacklist_samples_reached\": false, \"exclude_nan_labels\": true, \"verbosity\": 20, \"_debug_log\": \"automl_errors.log\", \"show_warnings\": false, \"model_explainability\": true, \"service_url\": null, \"sdk_url\": null, \"sdk_packages\": null, \"enable_onnx_compatible_models\": false, \"enable_split_onnx_featurizer_estimator_models\": false, \"vm_type\": \"STANDARD_D3_V2\", \"telemetry_verbosity\": 20, \"send_telemetry\": true, \"enable_dnn\": false, \"scenario\": \"SDK-1.13.0\", \"environment_label\": null, \"force_text_dnn\": false, \"enable_feature_sweeping\": true, \"enable_early_stopping\": true, \"early_stopping_n_iters\": 10, \"metrics\": null, \"enable_ensembling\": true, \"enable_stack_ensembling\": true, \"ensemble_iterations\": 15, \"enable_tf\": false, \"enable_subsampling\": null, \"subsample_seed\": null, \"enable_nimbusml\": false, \"enable_streaming\": false, \"force_streaming\": false, \"track_child_runs\": true, \"allowed_private_models\": [], \"label_column_name\": \"y\", \"weight_column_name\": null, \"cv_split_column_names\": null, \"enable_local_managed\": false, \"cost_mode\": 1, \"lag_length\": 0, \"metric_operation\": \"maximize\", \"preprocess\": true}', 'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"87962992-c1b7-4535-b1b1-6665612a6bdc\\\\\"}, \\\\\"datasets\\\\\": 0}', 'EnableSubsampling': 'False', 'runTemplate': 'AutoML', 'Orchestrator': 'automl', 'ClientType': 'Others', '_aml_system_scenario_identification': 'Remote.Parent', 'root_attribution': 'azureml.StepRun', 'snapshotId': '48892274-d433-4bd8-931e-4dc191d779fe', 'SetupRunId': 'b43c26ce-4d27-408b-a776-94843fa19e4e_setup', 'SetupRunContainerId': 'dcid.b43c26ce-4d27-408b-a776-94843fa19e4e_setup', 'ClientSdkVersion': '1.18.0', 'FeaturizationRunJsonPath': 'featurizer_container.json', 'FeaturizationRunId': 'b43c26ce-4d27-408b-a776-94843fa19e4e_featurize', 'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"dataset_classes\": 2, \"dataset_features\": 132, \"dataset_samples\": 29655, \"single_frequency_class_detected\": false}', 'ModelExplainRunId': 'b43c26ce-4d27-408b-a776-94843fa19e4e_ModelExplain'}, 'inputDatasets': [], 'logFiles': {'logs/azureml/executionlogs.txt': 'https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.b43c26ce-4d27-408b-a776-94843fa19e4e/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=Cubt40mVE%2FjZMS4pacl%2BJxq4T%2BDdde%2FyqfZoOoTQ60s%3D&st=2020-12-11T02%3A04%3A54Z&se=2020-12-11T10%3A14%3A54Z&sp=r', 'logs/azureml/stderrlogs.txt': 'https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.b43c26ce-4d27-408b-a776-94843fa19e4e/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=2xeHfvuI85J3u%2F0J9%2FqXuS%2FBWyZ3eH3409KCIEXB3a4%3D&st=2020-12-11T02%3A04%3A54Z&se=2020-12-11T10%3A14%3A54Z&sp=r', 'logs/azureml/stdoutlogs.txt': 'https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.b43c26ce-4d27-408b-a776-94843fa19e4e/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=J7m4sqwPGeejhCYyj5XqPJ3loY4TwbdilLEQmIZU%2Bo4%3D&st=2020-12-11T02%3A04%3A54Z&se=2020-12-11T10%3A14%3A54Z&sp=r'}}\n",
            "\n",
            "\n",
            "\n",
            "PipelineRun Execution Summary\n",
            "==============================\n",
            "PipelineRun Status: Finished\n",
            "{'runId': '3e7fba9c-9b56-436c-a98e-e268864b25d3', 'status': 'Completed', 'startTimeUtc': '2020-12-11T02:14:47.179485Z', 'endTimeUtc': '2020-12-11T02:47:41.150734Z', 'properties': {'azureml.runsource': 'azureml.PipelineRun', 'runSource': 'SDK', 'runType': 'SDK', 'azureml.parameters': '{}'}, 'inputDatasets': [], 'logFiles': {'logs/azureml/executionlogs.txt': 'https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.3e7fba9c-9b56-436c-a98e-e268864b25d3/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=UR1FZXp7bdwx46fulQoUbDI6vhHg21rLFGYHlgXzowg%3D&st=2020-12-11T02%3A05%3A08Z&se=2020-12-11T10%3A15%3A08Z&sp=r', 'logs/azureml/stderrlogs.txt': 'https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.3e7fba9c-9b56-436c-a98e-e268864b25d3/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=XZDHHDr6bPH7%2BHPerOTurrm0MlmnWFuRj5TSH3RS%2FiM%3D&st=2020-12-11T02%3A05%3A08Z&se=2020-12-11T10%3A15%3A08Z&sp=r', 'logs/azureml/stdoutlogs.txt': 'https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.3e7fba9c-9b56-436c-a98e-e268864b25d3/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=xALL63NuOxkL%2Bijs%2FRUjo0Pe9HunGFGyH%2FsdVo0QdoI%3D&st=2020-12-11T02%3A05%3A08Z&se=2020-12-11T10%3A15%3A08Z&sp=r'}}\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 13,
          "data": {
            "text/plain": "'Finished'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 13,
      "metadata": {
        "gather": {
          "logged": 1607654866106
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Examine Results\n",
        "\n",
        "### Retrieve the metrics of all child runs\n",
        "Outputs of above run can be used as inputs of other steps in pipeline. In this tutorial, we will examine the outputs by retrieve output data and running some tests."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_output = pipeline_run.get_pipeline_output(metrics_output_name)\n",
        "num_file_downloaded = metrics_output.download('.', show_progress=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading azureml/b43c26ce-4d27-408b-a776-94843fa19e4e/metrics_data\n",
            "Downloaded azureml/b43c26ce-4d27-408b-a776-94843fa19e4e/metrics_data, 1 files out of an estimated total of 1\n"
          ]
        }
      ],
      "execution_count": 14,
      "metadata": {
        "gather": {
          "logged": 1607654869094
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "with open(metrics_output._path_on_datastore) as f:\n",
        "    metrics_output_result = f.read()\n",
        "    \n",
        "deserialized_metrics_output = json.loads(metrics_output_result)\n",
        "df = pd.DataFrame(deserialized_metrics_output)\n",
        "df"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "                                 b43c26ce-4d27-408b-a776-94843fa19e4e_19  \\\nlog_loss                                           [0.19994256312838007]   \nrecall_score_micro                                  [0.9077389984825494]   \naverage_precision_score_weighted                    [0.9474347924918001]   \nprecision_score_micro                               [0.9077389984825494]   \nmatthews_correlation                                [0.4538726815046628]   \nAUC_macro                                           [0.9329981457709313]   \nnorm_macro_recall                                   [0.3585080587647982]   \nbalanced_accuracy                                   [0.6792540293823991]   \naverage_precision_score_macro                       [0.7953500733144905]   \nAUC_weighted                                        [0.9329981457709314]   \nAUC_micro                                           [0.9763877305247063]   \nrecall_score_macro                                  [0.6792540293823991]   \nweighted_accuracy                                   [0.9644656358962787]   \nf1_score_macro                                        [0.71617170693669]   \naverage_precision_score_micro                       [0.9775048906893984]   \nprecision_score_weighted                             [0.895092517403297]   \nprecision_score_macro                               [0.7873023436711378]   \nrecall_score_weighted                               [0.9077389984825494]   \nf1_score_weighted                                   [0.8971238918213456]   \nf1_score_micro                                      [0.9077389984825494]   \naccuracy                                            [0.9077389984825494]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_32  \\\nlog_loss                                           [0.19900048278384802]   \nrecall_score_micro                                  [0.9083459787556905]   \naverage_precision_score_weighted                    [0.9462377935321492]   \nprecision_score_micro                               [0.9083459787556905]   \nmatthews_correlation                                [0.4770100354439268]   \nAUC_macro                                           [0.9301630832439562]   \nnorm_macro_recall                                  [0.40418859417575725]   \nbalanced_accuracy                                   [0.7020942970878786]   \naverage_precision_score_macro                       [0.7913006257853854]   \nAUC_weighted                                        [0.9301630832439562]   \nAUC_micro                                           [0.9755841954863325]   \nrecall_score_macro                                  [0.7020942970878786]   \nweighted_accuracy                                    [0.959552692300219]   \nf1_score_macro                                       [0.732702729999914]   \naverage_precision_score_micro                       [0.9767570285532401]   \nprecision_score_weighted                            [0.8979594751405874]   \nprecision_score_macro                               [0.7814757481940144]   \nrecall_score_weighted                               [0.9083459787556905]   \nf1_score_weighted                                   [0.9008494117926957]   \nf1_score_micro                                      [0.9083459787556905]   \naccuracy                                            [0.9083459787556905]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_21  \\\nlog_loss                                           [0.22589233807484954]   \nrecall_score_micro                                  [0.9004552352048558]   \naverage_precision_score_weighted                     [0.945222197717833]   \nprecision_score_micro                               [0.9004552352048558]   \nmatthews_correlation                                [0.3256750549961802]   \nAUC_macro                                           [0.9304904908242521]   \nnorm_macro_recall                                  [0.16558117392520466]   \nbalanced_accuracy                                   [0.5827905869626023]   \naverage_precision_score_macro                        [0.787108791806625]   \nAUC_weighted                                        [0.9304904908242522]   \nAUC_micro                                           [0.9744804861368561]   \nrecall_score_macro                                  [0.5827905869626023]   \nweighted_accuracy                                   [0.9793227746800656]   \nf1_score_macro                                      [0.6136146528695394]   \naverage_precision_score_micro                       [0.9756497344937594]   \nprecision_score_weighted                            [0.8859664258327548]   \nprecision_score_macro                               [0.8202786854702324]   \nrecall_score_weighted                               [0.9004552352048558]   \nf1_score_weighted                                   [0.8719631449552753]   \nf1_score_micro                                      [0.9004552352048558]   \naccuracy                                            [0.9004552352048558]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_35  \\\nlog_loss                                           [0.17845480248144402]   \nrecall_score_micro                                  [0.9144157814871017]   \naverage_precision_score_weighted                    [0.9536515609219438]   \nprecision_score_micro                               [0.9144157814871017]   \nmatthews_correlation                                [0.5374219081241824]   \nAUC_macro                                           [0.9456503416708808]   \nnorm_macro_recall                                   [0.4939130901903688]   \nbalanced_accuracy                                   [0.7469565450951844]   \naverage_precision_score_macro                       [0.8170477776071983]   \nAUC_weighted                                        [0.9456503416708808]   \nAUC_micro                                           [0.9798346232047913]   \nrecall_score_macro                                  [0.7469565450951844]   \nweighted_accuracy                                   [0.9559913801875154]   \nf1_score_macro                                      [0.7669675155440259]   \naverage_precision_score_micro                       [0.9807748294629989]   \nprecision_score_weighted                            [0.9085981423022469]   \nprecision_score_macro                               [0.7923817095235484]   \nrecall_score_weighted                               [0.9144157814871017]   \nf1_score_weighted                                   [0.9108153659890639]   \nf1_score_micro                                      [0.9144157814871017]   \naccuracy                                            [0.9144157814871017]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_42  \\\nlog_loss                                             [0.333121191259141]   \nrecall_score_micro                                  [0.9034901365705614]   \naverage_precision_score_weighted                    [0.9419247601336111]   \nprecision_score_micro                               [0.9034901365705614]   \nmatthews_correlation                               [0.44464104145680644]   \nAUC_macro                                           [0.9197249405850176]   \nnorm_macro_recall                                  [0.37266947857448507]   \nbalanced_accuracy                                   [0.6863347392872425]   \naverage_precision_score_macro                       [0.7860426418121342]   \nAUC_weighted                                        [0.9197249405850176]   \nAUC_micro                                           [0.9735213836202825]   \nrecall_score_macro                                  [0.6863347392872425]   \nweighted_accuracy                                   [0.9574039477619037]   \nf1_score_macro                                      [0.7160942001183517]   \naverage_precision_score_micro                       [0.9721526792004359]   \nprecision_score_weighted                            [0.8916287906211322]   \nprecision_score_macro                               [0.7652560339849219]   \nrecall_score_weighted                               [0.9034901365705614]   \nf1_score_weighted                                   [0.8950898704613851]   \nf1_score_micro                                      [0.9034901365705614]   \naccuracy                                            [0.9034901365705614]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_48  \\\nlog_loss                                           [0.18021535340819012]   \nrecall_score_micro                                  [0.9116843702579667]   \naverage_precision_score_weighted                    [0.9551538469052214]   \nprecision_score_micro                               [0.9116843702579667]   \nmatthews_correlation                                [0.5188485842832073]   \nAUC_macro                                           [0.9469433006018372]   \nnorm_macro_recall                                  [0.47189110988854255]   \nbalanced_accuracy                                   [0.7359455549442713]   \naverage_precision_score_macro                       [0.8231662104450591]   \nAUC_weighted                                        [0.9469433006018371]   \nAUC_micro                                           [0.9803770369875726]   \nrecall_score_macro                                  [0.7359455549442713]   \nweighted_accuracy                                   [0.9553155644458374]   \nf1_score_macro                                      [0.7572938163705586]   \naverage_precision_score_micro                       [0.9812878947571118]   \nprecision_score_weighted                            [0.9050318363975759]   \nprecision_score_macro                               [0.7852393780805413]   \nrecall_score_weighted                               [0.9116843702579667]   \nf1_score_weighted                                   [0.9075132403774469]   \nf1_score_micro                                      [0.9116843702579667]   \naccuracy                                            [0.9116843702579667]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_24  \\\nlog_loss                                            [0.1809974148381821]   \nrecall_score_micro                                  [0.9113808801213961]   \naverage_precision_score_weighted                    [0.9530284047649816]   \nprecision_score_micro                               [0.9113808801213961]   \nmatthews_correlation                                [0.5197756567915791]   \nAUC_macro                                           [0.9438841004951403]   \nnorm_macro_recall                                   [0.4762858735901099]   \nbalanced_accuracy                                   [0.7381429367950549]   \naverage_precision_score_macro                       [0.8150378454592331]   \nAUC_weighted                                        [0.9438841004951403]   \nAUC_micro                                           [0.9792746171257781]   \nrecall_score_macro                                  [0.7381429367950549]   \nweighted_accuracy                                   [0.9543911754422495]   \nf1_score_macro                                      [0.7580675984486392]   \naverage_precision_score_micro                        [0.980258627086168]   \nprecision_score_weighted                            [0.9051091556982174]   \nprecision_score_macro                               [0.7836182515310355]   \nrecall_score_weighted                               [0.9113808801213961]   \nf1_score_weighted                                   [0.9075232070026762]   \nf1_score_micro                                      [0.9113808801213961]   \naccuracy                                            [0.9113808801213961]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_28  \\\nlog_loss                                            [0.2255125131651738]   \nrecall_score_micro                                  [0.9028831562974203]   \naverage_precision_score_weighted                    [0.9381231741869245]   \nprecision_score_micro                               [0.9028831562974203]   \nmatthews_correlation                               [0.42778043021510287]   \nAUC_macro                                           [0.9214657115812444]   \nnorm_macro_recall                                   [0.3435667883678153]   \nbalanced_accuracy                                   [0.6717833941839076]   \naverage_precision_score_macro                        [0.762706596296363]   \nAUC_weighted                                        [0.9214657115812442]   \nAUC_micro                                           [0.9698797783002248]   \nrecall_score_macro                                  [0.6717833941839076]   \nweighted_accuracy                                   [0.9602589760874132]   \nf1_score_macro                                      [0.7048502641343806]   \naverage_precision_score_micro                       [0.9675482626283061]   \nprecision_score_weighted                            [0.8892314558395303]   \nprecision_score_macro                               [0.7663180823507113]   \nrecall_score_weighted                               [0.9028831562974203]   \nf1_score_weighted                                   [0.8924642342199282]   \nf1_score_micro                                      [0.9028831562974204]   \naccuracy                                            [0.9028831562974203]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_40  \\\nlog_loss                                           [0.18343092080108137]   \nrecall_score_micro                                    [0.91350531107739]   \naverage_precision_score_weighted                    [0.9530396367392403]   \nprecision_score_micro                                 [0.91350531107739]   \nmatthews_correlation                                 [0.535979307721254]   \nAUC_macro                                           [0.9427736006683376]   \nnorm_macro_recall                                   [0.4976243268926197]   \nbalanced_accuracy                                   [0.7488121634463099]   \naverage_precision_score_macro                       [0.8156992649134418]   \nAUC_weighted                                        [0.9427736006683375]   \nAUC_micro                                           [0.9792255244876015]   \nrecall_score_macro                                  [0.7488121634463099]   \nweighted_accuracy                                   [0.9543941647599228]   \nf1_score_macro                                      [0.7666331430514044]   \naverage_precision_score_micro                       [0.9801982643366031]   \nprecision_score_weighted                            [0.9081762042023199]   \nprecision_score_macro                               [0.7886452719255267]   \nrecall_score_weighted                                 [0.91350531107739]   \nf1_score_weighted                                   [0.9103026662505035]   \nf1_score_micro                                        [0.91350531107739]   \naccuracy                                              [0.91350531107739]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_29  ...  \\\nlog_loss                                           [0.22650676948314194]  ...   \nrecall_score_micro                                  [0.9019726858877086]  ...   \naverage_precision_score_weighted                    [0.9385298911257193]  ...   \nprecision_score_micro                               [0.9019726858877086]  ...   \nmatthews_correlation                                [0.4226940860919895]  ...   \nAUC_macro                                           [0.9221121910467225]  ...   \nnorm_macro_recall                                    [0.340173234268228]  ...   \nbalanced_accuracy                                    [0.670086617134114]  ...   \naverage_precision_score_macro                       [0.7619707305778892]  ...   \nAUC_weighted                                        [0.9221121910467225]  ...   \nAUC_micro                                           [0.9696013410671893]  ...   \nrecall_score_macro                                   [0.670086617134114]  ...   \nweighted_accuracy                                   [0.9595437243471993]  ...   \nf1_score_macro                                      [0.7025326308946143]  ...   \naverage_precision_score_micro                       [0.9662179019848689]  ...   \nprecision_score_weighted                            [0.8881303433707081]  ...   \nprecision_score_macro                               [0.7626166206190402]  ...   \nrecall_score_weighted                               [0.9019726858877086]  ...   \nf1_score_weighted                                   [0.8915497623317314]  ...   \nf1_score_micro                                      [0.9019726858877086]  ...   \naccuracy                                            [0.9019726858877086]  ...   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_4  \\\nlog_loss                                           [0.2682880615085687]   \nrecall_score_micro                                 [0.8880121396054628]   \naverage_precision_score_weighted                   [0.9228532153302567]   \nprecision_score_micro                              [0.8880121396054628]   \nmatthews_correlation                                              [0.0]   \nAUC_macro                                          [0.8870721704482938]   \nnorm_macro_recall                                                 [0.0]   \nbalanced_accuracy                                                 [0.5]   \naverage_precision_score_macro                      [0.7121073740869006]   \nAUC_weighted                                       [0.8870721704482938]   \nAUC_micro                                          [0.9649981463614572]   \nrecall_score_macro                                                [0.5]   \nweighted_accuracy                                  [0.9843450583187134]   \nf1_score_macro                                     [0.4703423886834914]   \naverage_precision_score_micro                      [0.9657685361924963]   \nprecision_score_weighted                            [0.788565560086672]   \nprecision_score_macro                              [0.4440060698027314]   \nrecall_score_weighted                              [0.8880121396054628]   \nf1_score_weighted                                  [0.8353395018439429]   \nf1_score_micro                                     [0.8880121396054628]   \naccuracy                                           [0.8880121396054628]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_33  \\\nlog_loss                                           [0.18438902755770786]   \nrecall_score_micro                                  [0.9119878603945372]   \naverage_precision_score_weighted                    [0.9509461669750866]   \nprecision_score_micro                               [0.9119878603945372]   \nmatthews_correlation                                 [0.523106107160623]   \nAUC_macro                                           [0.9407813695361835]   \nnorm_macro_recall                                   [0.4793376641900391]   \nbalanced_accuracy                                   [0.7396688320950195]   \naverage_precision_score_macro                       [0.8071742282912644]   \nAUC_weighted                                        [0.9407813695361834]   \nAUC_micro                                            [0.978414897266977]   \nrecall_score_macro                                  [0.7396688320950195]   \nweighted_accuracy                                   [0.9547700139704612]   \nf1_score_macro                                      [0.7597246696921418]   \naverage_precision_score_micro                       [0.9794493482917321]   \nprecision_score_weighted                            [0.9057755480984142]   \nprecision_score_macro                               [0.7854355288470023]   \nrecall_score_weighted                               [0.9119878603945372]   \nf1_score_weighted                                   [0.9081566096944386]   \nf1_score_micro                                      [0.9119878603945372]   \naccuracy                                            [0.9119878603945372]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_14  \\\nlog_loss                                           [0.24626972222353805]   \nrecall_score_micro                                   [0.888619119878604]   \naverage_precision_score_weighted                    [0.9352731758390657]   \nprecision_score_micro                                [0.888619119878604]   \nmatthews_correlation                               [0.06939738570480868]   \nAUC_macro                                           [0.9047105013087041]   \nnorm_macro_recall                                 [0.005420054200542035]   \nbalanced_accuracy                                    [0.502710027100271]   \naverage_precision_score_macro                       [0.7579372368529234]   \nAUC_weighted                                        [0.9047105013087041]   \nAUC_micro                                           [0.9685077634066422]   \nrecall_score_macro                                   [0.502710027100271]   \nweighted_accuracy                                   [0.9844299089511324]   \nf1_score_macro                                      [0.4758844840760577]   \naverage_precision_score_micro                       [0.9694123498750379]   \nprecision_score_weighted                            [0.9010323549240192]   \nprecision_score_macro                               [0.9442757364105678]   \nrecall_score_weighted                                [0.888619119878604]   \nf1_score_weighted                                   [0.8368155592289684]   \nf1_score_micro                                       [0.888619119878604]   \naccuracy                                             [0.888619119878604]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_41  \\\nlog_loss                                           [0.18642298920289568]   \nrecall_score_micro                                  [0.9071320182094081]   \naverage_precision_score_weighted                    [0.9514851564833581]   \nprecision_score_micro                               [0.9071320182094081]   \nmatthews_correlation                                [0.4975744330930443]   \nAUC_macro                                           [0.9407985040205835]   \nnorm_macro_recall                                  [0.45729160299121796]   \nbalanced_accuracy                                    [0.728645801495609]   \naverage_precision_score_macro                       [0.8096748757055897]   \nAUC_weighted                                        [0.9407985040205835]   \nAUC_micro                                           [0.9785673331322347]   \nrecall_score_macro                                   [0.728645801495609]   \nweighted_accuracy                                   [0.9514453178489745]   \nf1_score_macro                                      [0.7471349636754323]   \naverage_precision_score_micro                       [0.9795810404890688]   \nprecision_score_weighted                            [0.9006281342295325]   \nprecision_score_macro                               [0.7707028894127967]   \nrecall_score_weighted                               [0.9071320182094081]   \nf1_score_weighted                                   [0.9032251843711121]   \nf1_score_micro                                      [0.9071320182094081]   \naccuracy                                            [0.9071320182094081]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_9  \\\nlog_loss                                           [0.5486619755809257]   \nrecall_score_micro                                 [0.7183611532625189]   \naverage_precision_score_weighted                   [0.9183183499040336]   \nprecision_score_micro                              [0.7183611532625189]   \nmatthews_correlation                              [0.30713640522324576]   \nAUC_macro                                          [0.8442600403447644]   \nnorm_macro_recall                                  [0.4602266938595565]   \nbalanced_accuracy                                  [0.7301133469297783]   \naverage_precision_score_macro                      [0.7196307341048489]   \nAUC_weighted                                       [0.8442600403447643]   \nAUC_micro                                          [0.8421574049981463]   \nrecall_score_macro                                 [0.7301133469297783]   \nweighted_accuracy                                  [0.7154434014663984]   \nf1_score_macro                                     [0.5952954231175658]   \naverage_precision_score_micro                      [0.8239068118962591]   \nprecision_score_weighted                           [0.8775965631363282]   \nprecision_score_macro                              [0.6024851151313755]   \nrecall_score_weighted                              [0.7183611532625189]   \nf1_score_weighted                                  [0.7684814836462645]   \nf1_score_micro                                     [0.7183611532625188]   \naccuracy                                           [0.7183611532625189]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_12  \\\nlog_loss                                            [0.5948584561250013]   \nrecall_score_micro                                  [0.7738998482549317]   \naverage_precision_score_weighted                    [0.9217085542438479]   \nprecision_score_micro                               [0.7738998482549317]   \nmatthews_correlation                                 [0.369590375111771]   \nAUC_macro                                           [0.8682904600747989]   \nnorm_macro_recall                                   [0.5275059414982393]   \nbalanced_accuracy                                   [0.7637529707491196]   \naverage_precision_score_macro                       [0.7156567249583601]   \nAUC_weighted                                        [0.8682904600747989]   \nAUC_micro                                           [0.8503161777742982]   \nrecall_score_macro                                  [0.7637529707491196]   \nweighted_accuracy                                   [0.7764190434712325]   \nf1_score_macro                                      [0.6428383841778761]   \naverage_precision_score_micro                       [0.8363567777302504]   \nprecision_score_weighted                             [0.886823428163566]   \nprecision_score_macro                               [0.6294744140580599]   \nrecall_score_weighted                               [0.7738998482549317]   \nf1_score_weighted                                    [0.810736261755547]   \nf1_score_micro                                      [0.7738998482549316]   \naccuracy                                            [0.7738998482549317]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_31  \\\nlog_loss                                           [0.18012736943904312]   \nrecall_score_micro                                  [0.9132018209408195]   \naverage_precision_score_weighted                    [0.9541411484948241]   \nprecision_score_micro                               [0.9132018209408195]   \nmatthews_correlation                                [0.5317952742313653]   \nAUC_macro                                           [0.9442592067752529]   \nnorm_macro_recall                                  [0.49017777259112316]   \nbalanced_accuracy                                   [0.7450888862955616]   \naverage_precision_score_macro                       [0.8198704441305439]   \nAUC_weighted                                         [0.944259206775253]   \nAUC_micro                                           [0.9795984627464707]   \nrecall_score_macro                                  [0.7450888862955616]   \nweighted_accuracy                                    [0.954939715235299]   \nf1_score_macro                                      [0.7642816263884915]   \naverage_precision_score_micro                       [0.9805583578526404]   \nprecision_score_weighted                            [0.9074329436294158]   \nprecision_score_macro                               [0.7884731106837775]   \nrecall_score_weighted                               [0.9132018209408195]   \nf1_score_weighted                                   [0.9096764096913943]   \nf1_score_micro                                      [0.9132018209408195]   \naccuracy                                            [0.9132018209408195]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_3  \\\nlog_loss                                           [0.5076511992408919]   \nrecall_score_micro                                 [0.8051593323216996]   \naverage_precision_score_weighted                   [0.9289274334641353]   \nprecision_score_micro                              [0.8051593323216996]   \nmatthews_correlation                              [0.41344304840880336]   \nAUC_macro                                          [0.8829756393941246]   \nnorm_macro_recall                                  [0.5698123727648761]   \nbalanced_accuracy                                   [0.784906186382438]   \naverage_precision_score_macro                      [0.7389737888053395]   \nAUC_weighted                                       [0.8829756393941246]   \nAUC_micro                                          [0.8630903953891604]   \nrecall_score_macro                                  [0.784906186382438]   \nweighted_accuracy                                  [0.8101876406200903]   \nf1_score_macro                                      [0.673368254097662]   \naverage_precision_score_micro                       [0.832961381492064]   \nprecision_score_weighted                           [0.8935539479360971]   \nprecision_score_macro                              [0.6499924909037539]   \nrecall_score_weighted                              [0.8051593323216996]   \nf1_score_weighted                                  [0.8343762746513476]   \nf1_score_micro                                     [0.8051593323216996]   \naccuracy                                           [0.8051593323216996]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_7  \\\nlog_loss                                          [0.27227534163321543]   \nrecall_score_micro                                 [0.8949924127465857]   \naverage_precision_score_weighted                   [0.9203705461111921]   \nprecision_score_micro                              [0.8949924127465857]   \nmatthews_correlation                              [0.23900459604243027]   \nAUC_macro                                          [0.8558225756556952]   \nnorm_macro_recall                                 [0.08601325931236081]   \nbalanced_accuracy                                  [0.5430066296561804]   \naverage_precision_score_macro                      [0.7219799767731683]   \nAUC_weighted                                       [0.8558225756556952]   \nAUC_micro                                          [0.9589240146356851]   \nrecall_score_macro                                 [0.5430066296561804]   \nweighted_accuracy                                  [0.9823809616336023]   \nf1_score_macro                                     [0.5520944975437427]   \naverage_precision_score_micro                      [0.9589781516459913]   \nprecision_score_weighted                              [0.8822059797688]   \nprecision_score_macro                              [0.8320604136273921]   \nrecall_score_weighted                              [0.8949924127465857]   \nf1_score_weighted                                  [0.8562186630566354]   \nf1_score_micro                                     [0.8949924127465857]   \naccuracy                                           [0.8949924127465857]   \n\n                                 b43c26ce-4d27-408b-a776-94843fa19e4e_1  \nlog_loss                                           [0.1874363495858499]  \nrecall_score_micro                                 [0.9071320182094081]  \naverage_precision_score_weighted                   [0.9505970434373063]  \nprecision_score_micro                              [0.9071320182094081]  \nmatthews_correlation                                [0.488678780261868]  \nAUC_macro                                          [0.9392346349984347]  \nnorm_macro_recall                                 [0.43834549418631563]  \nbalanced_accuracy                                  [0.7191727470931578]  \naverage_precision_score_macro                      [0.8065229883244922]  \nAUC_weighted                                       [0.9392346349984347]  \nAUC_micro                                          [0.9781770788959222]  \nrecall_score_macro                                 [0.7191727470931578]  \nweighted_accuracy                                  [0.9537972210153172]  \nf1_score_macro                                     [0.7416848907681176]  \naverage_precision_score_micro                      [0.9791945367231853]  \nprecision_score_weighted                           [0.8991976076061607]  \nprecision_score_macro                              [0.7723958081530135]  \nrecall_score_weighted                              [0.9071320182094081]  \nf1_score_weighted                                  [0.9021127651963996]  \nf1_score_micro                                     [0.9071320182094081]  \naccuracy                                           [0.9071320182094081]  \n\n[21 rows x 44 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_19</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_32</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_21</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_35</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_42</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_48</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_24</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_28</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_40</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_29</th>\n      <th>...</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_4</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_33</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_14</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_41</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_9</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_12</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_31</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_3</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_7</th>\n      <th>b43c26ce-4d27-408b-a776-94843fa19e4e_1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>log_loss</th>\n      <td>[0.19994256312838007]</td>\n      <td>[0.19900048278384802]</td>\n      <td>[0.22589233807484954]</td>\n      <td>[0.17845480248144402]</td>\n      <td>[0.333121191259141]</td>\n      <td>[0.18021535340819012]</td>\n      <td>[0.1809974148381821]</td>\n      <td>[0.2255125131651738]</td>\n      <td>[0.18343092080108137]</td>\n      <td>[0.22650676948314194]</td>\n      <td>...</td>\n      <td>[0.2682880615085687]</td>\n      <td>[0.18438902755770786]</td>\n      <td>[0.24626972222353805]</td>\n      <td>[0.18642298920289568]</td>\n      <td>[0.5486619755809257]</td>\n      <td>[0.5948584561250013]</td>\n      <td>[0.18012736943904312]</td>\n      <td>[0.5076511992408919]</td>\n      <td>[0.27227534163321543]</td>\n      <td>[0.1874363495858499]</td>\n    </tr>\n    <tr>\n      <th>recall_score_micro</th>\n      <td>[0.9077389984825494]</td>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.9144157814871017]</td>\n      <td>[0.9034901365705614]</td>\n      <td>[0.9116843702579667]</td>\n      <td>[0.9113808801213961]</td>\n      <td>[0.9028831562974203]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.9019726858877086]</td>\n      <td>...</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.9071320182094081]</td>\n      <td>[0.7183611532625189]</td>\n      <td>[0.7738998482549317]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8051593323216996]</td>\n      <td>[0.8949924127465857]</td>\n      <td>[0.9071320182094081]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_weighted</th>\n      <td>[0.9474347924918001]</td>\n      <td>[0.9462377935321492]</td>\n      <td>[0.945222197717833]</td>\n      <td>[0.9536515609219438]</td>\n      <td>[0.9419247601336111]</td>\n      <td>[0.9551538469052214]</td>\n      <td>[0.9530284047649816]</td>\n      <td>[0.9381231741869245]</td>\n      <td>[0.9530396367392403]</td>\n      <td>[0.9385298911257193]</td>\n      <td>...</td>\n      <td>[0.9228532153302567]</td>\n      <td>[0.9509461669750866]</td>\n      <td>[0.9352731758390657]</td>\n      <td>[0.9514851564833581]</td>\n      <td>[0.9183183499040336]</td>\n      <td>[0.9217085542438479]</td>\n      <td>[0.9541411484948241]</td>\n      <td>[0.9289274334641353]</td>\n      <td>[0.9203705461111921]</td>\n      <td>[0.9505970434373063]</td>\n    </tr>\n    <tr>\n      <th>precision_score_micro</th>\n      <td>[0.9077389984825494]</td>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.9144157814871017]</td>\n      <td>[0.9034901365705614]</td>\n      <td>[0.9116843702579667]</td>\n      <td>[0.9113808801213961]</td>\n      <td>[0.9028831562974203]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.9019726858877086]</td>\n      <td>...</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.9071320182094081]</td>\n      <td>[0.7183611532625189]</td>\n      <td>[0.7738998482549317]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8051593323216996]</td>\n      <td>[0.8949924127465857]</td>\n      <td>[0.9071320182094081]</td>\n    </tr>\n    <tr>\n      <th>matthews_correlation</th>\n      <td>[0.4538726815046628]</td>\n      <td>[0.4770100354439268]</td>\n      <td>[0.3256750549961802]</td>\n      <td>[0.5374219081241824]</td>\n      <td>[0.44464104145680644]</td>\n      <td>[0.5188485842832073]</td>\n      <td>[0.5197756567915791]</td>\n      <td>[0.42778043021510287]</td>\n      <td>[0.535979307721254]</td>\n      <td>[0.4226940860919895]</td>\n      <td>...</td>\n      <td>[0.0]</td>\n      <td>[0.523106107160623]</td>\n      <td>[0.06939738570480868]</td>\n      <td>[0.4975744330930443]</td>\n      <td>[0.30713640522324576]</td>\n      <td>[0.369590375111771]</td>\n      <td>[0.5317952742313653]</td>\n      <td>[0.41344304840880336]</td>\n      <td>[0.23900459604243027]</td>\n      <td>[0.488678780261868]</td>\n    </tr>\n    <tr>\n      <th>AUC_macro</th>\n      <td>[0.9329981457709313]</td>\n      <td>[0.9301630832439562]</td>\n      <td>[0.9304904908242521]</td>\n      <td>[0.9456503416708808]</td>\n      <td>[0.9197249405850176]</td>\n      <td>[0.9469433006018372]</td>\n      <td>[0.9438841004951403]</td>\n      <td>[0.9214657115812444]</td>\n      <td>[0.9427736006683376]</td>\n      <td>[0.9221121910467225]</td>\n      <td>...</td>\n      <td>[0.8870721704482938]</td>\n      <td>[0.9407813695361835]</td>\n      <td>[0.9047105013087041]</td>\n      <td>[0.9407985040205835]</td>\n      <td>[0.8442600403447644]</td>\n      <td>[0.8682904600747989]</td>\n      <td>[0.9442592067752529]</td>\n      <td>[0.8829756393941246]</td>\n      <td>[0.8558225756556952]</td>\n      <td>[0.9392346349984347]</td>\n    </tr>\n    <tr>\n      <th>norm_macro_recall</th>\n      <td>[0.3585080587647982]</td>\n      <td>[0.40418859417575725]</td>\n      <td>[0.16558117392520466]</td>\n      <td>[0.4939130901903688]</td>\n      <td>[0.37266947857448507]</td>\n      <td>[0.47189110988854255]</td>\n      <td>[0.4762858735901099]</td>\n      <td>[0.3435667883678153]</td>\n      <td>[0.4976243268926197]</td>\n      <td>[0.340173234268228]</td>\n      <td>...</td>\n      <td>[0.0]</td>\n      <td>[0.4793376641900391]</td>\n      <td>[0.005420054200542035]</td>\n      <td>[0.45729160299121796]</td>\n      <td>[0.4602266938595565]</td>\n      <td>[0.5275059414982393]</td>\n      <td>[0.49017777259112316]</td>\n      <td>[0.5698123727648761]</td>\n      <td>[0.08601325931236081]</td>\n      <td>[0.43834549418631563]</td>\n    </tr>\n    <tr>\n      <th>balanced_accuracy</th>\n      <td>[0.6792540293823991]</td>\n      <td>[0.7020942970878786]</td>\n      <td>[0.5827905869626023]</td>\n      <td>[0.7469565450951844]</td>\n      <td>[0.6863347392872425]</td>\n      <td>[0.7359455549442713]</td>\n      <td>[0.7381429367950549]</td>\n      <td>[0.6717833941839076]</td>\n      <td>[0.7488121634463099]</td>\n      <td>[0.670086617134114]</td>\n      <td>...</td>\n      <td>[0.5]</td>\n      <td>[0.7396688320950195]</td>\n      <td>[0.502710027100271]</td>\n      <td>[0.728645801495609]</td>\n      <td>[0.7301133469297783]</td>\n      <td>[0.7637529707491196]</td>\n      <td>[0.7450888862955616]</td>\n      <td>[0.784906186382438]</td>\n      <td>[0.5430066296561804]</td>\n      <td>[0.7191727470931578]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_macro</th>\n      <td>[0.7953500733144905]</td>\n      <td>[0.7913006257853854]</td>\n      <td>[0.787108791806625]</td>\n      <td>[0.8170477776071983]</td>\n      <td>[0.7860426418121342]</td>\n      <td>[0.8231662104450591]</td>\n      <td>[0.8150378454592331]</td>\n      <td>[0.762706596296363]</td>\n      <td>[0.8156992649134418]</td>\n      <td>[0.7619707305778892]</td>\n      <td>...</td>\n      <td>[0.7121073740869006]</td>\n      <td>[0.8071742282912644]</td>\n      <td>[0.7579372368529234]</td>\n      <td>[0.8096748757055897]</td>\n      <td>[0.7196307341048489]</td>\n      <td>[0.7156567249583601]</td>\n      <td>[0.8198704441305439]</td>\n      <td>[0.7389737888053395]</td>\n      <td>[0.7219799767731683]</td>\n      <td>[0.8065229883244922]</td>\n    </tr>\n    <tr>\n      <th>AUC_weighted</th>\n      <td>[0.9329981457709314]</td>\n      <td>[0.9301630832439562]</td>\n      <td>[0.9304904908242522]</td>\n      <td>[0.9456503416708808]</td>\n      <td>[0.9197249405850176]</td>\n      <td>[0.9469433006018371]</td>\n      <td>[0.9438841004951403]</td>\n      <td>[0.9214657115812442]</td>\n      <td>[0.9427736006683375]</td>\n      <td>[0.9221121910467225]</td>\n      <td>...</td>\n      <td>[0.8870721704482938]</td>\n      <td>[0.9407813695361834]</td>\n      <td>[0.9047105013087041]</td>\n      <td>[0.9407985040205835]</td>\n      <td>[0.8442600403447643]</td>\n      <td>[0.8682904600747989]</td>\n      <td>[0.944259206775253]</td>\n      <td>[0.8829756393941246]</td>\n      <td>[0.8558225756556952]</td>\n      <td>[0.9392346349984347]</td>\n    </tr>\n    <tr>\n      <th>AUC_micro</th>\n      <td>[0.9763877305247063]</td>\n      <td>[0.9755841954863325]</td>\n      <td>[0.9744804861368561]</td>\n      <td>[0.9798346232047913]</td>\n      <td>[0.9735213836202825]</td>\n      <td>[0.9803770369875726]</td>\n      <td>[0.9792746171257781]</td>\n      <td>[0.9698797783002248]</td>\n      <td>[0.9792255244876015]</td>\n      <td>[0.9696013410671893]</td>\n      <td>...</td>\n      <td>[0.9649981463614572]</td>\n      <td>[0.978414897266977]</td>\n      <td>[0.9685077634066422]</td>\n      <td>[0.9785673331322347]</td>\n      <td>[0.8421574049981463]</td>\n      <td>[0.8503161777742982]</td>\n      <td>[0.9795984627464707]</td>\n      <td>[0.8630903953891604]</td>\n      <td>[0.9589240146356851]</td>\n      <td>[0.9781770788959222]</td>\n    </tr>\n    <tr>\n      <th>recall_score_macro</th>\n      <td>[0.6792540293823991]</td>\n      <td>[0.7020942970878786]</td>\n      <td>[0.5827905869626023]</td>\n      <td>[0.7469565450951844]</td>\n      <td>[0.6863347392872425]</td>\n      <td>[0.7359455549442713]</td>\n      <td>[0.7381429367950549]</td>\n      <td>[0.6717833941839076]</td>\n      <td>[0.7488121634463099]</td>\n      <td>[0.670086617134114]</td>\n      <td>...</td>\n      <td>[0.5]</td>\n      <td>[0.7396688320950195]</td>\n      <td>[0.502710027100271]</td>\n      <td>[0.728645801495609]</td>\n      <td>[0.7301133469297783]</td>\n      <td>[0.7637529707491196]</td>\n      <td>[0.7450888862955616]</td>\n      <td>[0.784906186382438]</td>\n      <td>[0.5430066296561804]</td>\n      <td>[0.7191727470931578]</td>\n    </tr>\n    <tr>\n      <th>weighted_accuracy</th>\n      <td>[0.9644656358962787]</td>\n      <td>[0.959552692300219]</td>\n      <td>[0.9793227746800656]</td>\n      <td>[0.9559913801875154]</td>\n      <td>[0.9574039477619037]</td>\n      <td>[0.9553155644458374]</td>\n      <td>[0.9543911754422495]</td>\n      <td>[0.9602589760874132]</td>\n      <td>[0.9543941647599228]</td>\n      <td>[0.9595437243471993]</td>\n      <td>...</td>\n      <td>[0.9843450583187134]</td>\n      <td>[0.9547700139704612]</td>\n      <td>[0.9844299089511324]</td>\n      <td>[0.9514453178489745]</td>\n      <td>[0.7154434014663984]</td>\n      <td>[0.7764190434712325]</td>\n      <td>[0.954939715235299]</td>\n      <td>[0.8101876406200903]</td>\n      <td>[0.9823809616336023]</td>\n      <td>[0.9537972210153172]</td>\n    </tr>\n    <tr>\n      <th>f1_score_macro</th>\n      <td>[0.71617170693669]</td>\n      <td>[0.732702729999914]</td>\n      <td>[0.6136146528695394]</td>\n      <td>[0.7669675155440259]</td>\n      <td>[0.7160942001183517]</td>\n      <td>[0.7572938163705586]</td>\n      <td>[0.7580675984486392]</td>\n      <td>[0.7048502641343806]</td>\n      <td>[0.7666331430514044]</td>\n      <td>[0.7025326308946143]</td>\n      <td>...</td>\n      <td>[0.4703423886834914]</td>\n      <td>[0.7597246696921418]</td>\n      <td>[0.4758844840760577]</td>\n      <td>[0.7471349636754323]</td>\n      <td>[0.5952954231175658]</td>\n      <td>[0.6428383841778761]</td>\n      <td>[0.7642816263884915]</td>\n      <td>[0.673368254097662]</td>\n      <td>[0.5520944975437427]</td>\n      <td>[0.7416848907681176]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_micro</th>\n      <td>[0.9775048906893984]</td>\n      <td>[0.9767570285532401]</td>\n      <td>[0.9756497344937594]</td>\n      <td>[0.9807748294629989]</td>\n      <td>[0.9721526792004359]</td>\n      <td>[0.9812878947571118]</td>\n      <td>[0.980258627086168]</td>\n      <td>[0.9675482626283061]</td>\n      <td>[0.9801982643366031]</td>\n      <td>[0.9662179019848689]</td>\n      <td>...</td>\n      <td>[0.9657685361924963]</td>\n      <td>[0.9794493482917321]</td>\n      <td>[0.9694123498750379]</td>\n      <td>[0.9795810404890688]</td>\n      <td>[0.8239068118962591]</td>\n      <td>[0.8363567777302504]</td>\n      <td>[0.9805583578526404]</td>\n      <td>[0.832961381492064]</td>\n      <td>[0.9589781516459913]</td>\n      <td>[0.9791945367231853]</td>\n    </tr>\n    <tr>\n      <th>precision_score_weighted</th>\n      <td>[0.895092517403297]</td>\n      <td>[0.8979594751405874]</td>\n      <td>[0.8859664258327548]</td>\n      <td>[0.9085981423022469]</td>\n      <td>[0.8916287906211322]</td>\n      <td>[0.9050318363975759]</td>\n      <td>[0.9051091556982174]</td>\n      <td>[0.8892314558395303]</td>\n      <td>[0.9081762042023199]</td>\n      <td>[0.8881303433707081]</td>\n      <td>...</td>\n      <td>[0.788565560086672]</td>\n      <td>[0.9057755480984142]</td>\n      <td>[0.9010323549240192]</td>\n      <td>[0.9006281342295325]</td>\n      <td>[0.8775965631363282]</td>\n      <td>[0.886823428163566]</td>\n      <td>[0.9074329436294158]</td>\n      <td>[0.8935539479360971]</td>\n      <td>[0.8822059797688]</td>\n      <td>[0.8991976076061607]</td>\n    </tr>\n    <tr>\n      <th>precision_score_macro</th>\n      <td>[0.7873023436711378]</td>\n      <td>[0.7814757481940144]</td>\n      <td>[0.8202786854702324]</td>\n      <td>[0.7923817095235484]</td>\n      <td>[0.7652560339849219]</td>\n      <td>[0.7852393780805413]</td>\n      <td>[0.7836182515310355]</td>\n      <td>[0.7663180823507113]</td>\n      <td>[0.7886452719255267]</td>\n      <td>[0.7626166206190402]</td>\n      <td>...</td>\n      <td>[0.4440060698027314]</td>\n      <td>[0.7854355288470023]</td>\n      <td>[0.9442757364105678]</td>\n      <td>[0.7707028894127967]</td>\n      <td>[0.6024851151313755]</td>\n      <td>[0.6294744140580599]</td>\n      <td>[0.7884731106837775]</td>\n      <td>[0.6499924909037539]</td>\n      <td>[0.8320604136273921]</td>\n      <td>[0.7723958081530135]</td>\n    </tr>\n    <tr>\n      <th>recall_score_weighted</th>\n      <td>[0.9077389984825494]</td>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.9144157814871017]</td>\n      <td>[0.9034901365705614]</td>\n      <td>[0.9116843702579667]</td>\n      <td>[0.9113808801213961]</td>\n      <td>[0.9028831562974203]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.9019726858877086]</td>\n      <td>...</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.9071320182094081]</td>\n      <td>[0.7183611532625189]</td>\n      <td>[0.7738998482549317]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8051593323216996]</td>\n      <td>[0.8949924127465857]</td>\n      <td>[0.9071320182094081]</td>\n    </tr>\n    <tr>\n      <th>f1_score_weighted</th>\n      <td>[0.8971238918213456]</td>\n      <td>[0.9008494117926957]</td>\n      <td>[0.8719631449552753]</td>\n      <td>[0.9108153659890639]</td>\n      <td>[0.8950898704613851]</td>\n      <td>[0.9075132403774469]</td>\n      <td>[0.9075232070026762]</td>\n      <td>[0.8924642342199282]</td>\n      <td>[0.9103026662505035]</td>\n      <td>[0.8915497623317314]</td>\n      <td>...</td>\n      <td>[0.8353395018439429]</td>\n      <td>[0.9081566096944386]</td>\n      <td>[0.8368155592289684]</td>\n      <td>[0.9032251843711121]</td>\n      <td>[0.7684814836462645]</td>\n      <td>[0.810736261755547]</td>\n      <td>[0.9096764096913943]</td>\n      <td>[0.8343762746513476]</td>\n      <td>[0.8562186630566354]</td>\n      <td>[0.9021127651963996]</td>\n    </tr>\n    <tr>\n      <th>f1_score_micro</th>\n      <td>[0.9077389984825494]</td>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.9144157814871017]</td>\n      <td>[0.9034901365705614]</td>\n      <td>[0.9116843702579667]</td>\n      <td>[0.9113808801213961]</td>\n      <td>[0.9028831562974204]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.9019726858877086]</td>\n      <td>...</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.9071320182094081]</td>\n      <td>[0.7183611532625188]</td>\n      <td>[0.7738998482549316]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8051593323216996]</td>\n      <td>[0.8949924127465857]</td>\n      <td>[0.9071320182094081]</td>\n    </tr>\n    <tr>\n      <th>accuracy</th>\n      <td>[0.9077389984825494]</td>\n      <td>[0.9083459787556905]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.9144157814871017]</td>\n      <td>[0.9034901365705614]</td>\n      <td>[0.9116843702579667]</td>\n      <td>[0.9113808801213961]</td>\n      <td>[0.9028831562974203]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.9019726858877086]</td>\n      <td>...</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9119878603945372]</td>\n      <td>[0.888619119878604]</td>\n      <td>[0.9071320182094081]</td>\n      <td>[0.7183611532625189]</td>\n      <td>[0.7738998482549317]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.8051593323216996]</td>\n      <td>[0.8949924127465857]</td>\n      <td>[0.9071320182094081]</td>\n    </tr>\n  </tbody>\n</table>\n<p>21 rows × 44 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 27,
      "metadata": {
        "gather": {
          "logged": 1607732198533
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Retrieve the Best Model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve best model from Pipeline Run\n",
        "best_model_output = pipeline_run.get_pipeline_output(best_model_output_name)\n",
        "num_file_downloaded = best_model_output.download('.', show_progress=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading azureml/b43c26ce-4d27-408b-a776-94843fa19e4e/model_data\n",
            "Downloaded azureml/b43c26ce-4d27-408b-a776-94843fa19e4e/model_data, 1 files out of an estimated total of 1\n"
          ]
        }
      ],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1607654871780
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "with open(best_model_output._path_on_datastore, \"rb\" ) as f:\n",
        "    best_model = pickle.load(f)\n",
        "best_model"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 16,
          "data": {
            "text/plain": "PipelineWithYTransformations(Pipeline={'memory': None,\n                                       'steps': [('datatransformer',\n                                                  DataTransformer(enable_dnn=None,\n                                                                  enable_feature_sweeping=None,\n                                                                  feature_sweeping_config=None,\n                                                                  feature_sweeping_timeout=None,\n                                                                  featurization_config=None,\n                                                                  force_text_dnn=None,\n                                                                  is_cross_validation=None,\n                                                                  is_onnx_compatible=None,\n                                                                  logger=None,\n                                                                  observer=None,\n                                                                  task=None,\n                                                                  working_dir=None))...\n                                                                                                                                objective='reg:logistic',\n                                                                                                                                random_state=0,\n                                                                                                                                reg_alpha=2.3958333333333335,\n                                                                                                                                reg_lambda=0.8333333333333334,\n                                                                                                                                scale_pos_weight=1,\n                                                                                                                                seed=None,\n                                                                                                                                silent=None,\n                                                                                                                                subsample=0.9,\n                                                                                                                                tree_method='auto',\n                                                                                                                                verbose=-10,\n                                                                                                                                verbosity=0))],\n                                                                                                      verbose=False))],\n                                                                                flatten_transform=None,\n                                                                                weights=[0.375,\n                                                                                         0.125,\n                                                                                         0.125,\n                                                                                         0.125,\n                                                                                         0.125,\n                                                                                         0.125]))],\n                                       'verbose': False},\n                             y_transformer={},\n                             y_transformer_name='LabelEncoder')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1607654873544
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.steps"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "[('datatransformer',\n  DataTransformer(enable_dnn=None, enable_feature_sweeping=None,\n                  feature_sweeping_config=None, feature_sweeping_timeout=None,\n                  featurization_config=None, force_text_dnn=None,\n                  is_cross_validation=None, is_onnx_compatible=None, logger=None,\n                  observer=None, task=None, working_dir=None)),\n ('prefittedsoftvotingclassifier',\n  PreFittedSoftVotingClassifier(classification_labels=None,\n                                estimators=[('35',\n                                             Pipeline(memory=None,\n                                                      steps=[('standardscalerwrapper',\n                                                              <azureml.automl.runtime.shared.model_wrappers.StandardScalerWrapper object at 0x7f6fcfc17278>),\n                                                             ('xgboostclassifier',\n                                                              XGBoostClassifier(base_score=0.5,\n                                                                                booster='gbtree',\n                                                                                colsample_bylevel=1,\n                                                                                colsample_bynode=1,\n                                                                                colsample_bytree=0.6...\n                                                                                min_child_weight=1,\n                                                                                missing=nan,\n                                                                                n_estimators=25,\n                                                                                n_jobs=1,\n                                                                                nthread=None,\n                                                                                objective='reg:logistic',\n                                                                                random_state=0,\n                                                                                reg_alpha=2.3958333333333335,\n                                                                                reg_lambda=0.8333333333333334,\n                                                                                scale_pos_weight=1,\n                                                                                seed=None,\n                                                                                silent=None,\n                                                                                subsample=0.9,\n                                                                                tree_method='auto',\n                                                                                verbose=-10,\n                                                                                verbosity=0))],\n                                                      verbose=False))],\n                                flatten_transform=None,\n                                weights=[0.375, 0.125, 0.125, 0.125, 0.125,\n                                         0.125]))]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1607654873668
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Test the Model\n",
        "#### Load Test Data\n",
        "For the test data, it should have the same preparation step as the train data. Otherwise it might get failed at the preprocessing step."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_test = Dataset.Tabular.from_delimited_files(path='https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_train.csv')\n",
        "df_test = dataset_test.to_pandas_dataframe()\n",
        "df_test = df_test[pd.notnull(df_test['y'])]\n",
        "\n",
        "y_test = df_test['y']\n",
        "X_test = df_test.drop(['y'], axis=1)"
      ],
      "outputs": [],
      "execution_count": 29,
      "metadata": {
        "gather": {
          "logged": 1607732259151
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Testing Our Best Fitted Model\n",
        "\n",
        "We will use confusion matrix to see how our model works."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "ypred = best_model.predict(X_test)\n",
        "cm = confusion_matrix(y_test, ypred)"
      ],
      "outputs": [],
      "execution_count": 30,
      "metadata": {
        "gather": {
          "logged": 1607732268208
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the confusion matrix\n",
        "pd.DataFrame(cm).style.background_gradient(cmap='Blues', low=0, high=0.9)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "<pandas.io.formats.style.Styler at 0x7f6fcfb08438>",
            "text/html": "<style  type=\"text/css\" >\n    #T_49a10e1a_3b5b_11eb_9907_000d3a13a722row0_col0 {\n            background-color:  #63a8d3;\n            color:  #000000;\n        }    #T_49a10e1a_3b5b_11eb_9907_000d3a13a722row0_col1 {\n            background-color:  #f7fbff;\n            color:  #000000;\n        }    #T_49a10e1a_3b5b_11eb_9907_000d3a13a722row1_col0 {\n            background-color:  #f7fbff;\n            color:  #000000;\n        }    #T_49a10e1a_3b5b_11eb_9907_000d3a13a722row1_col1 {\n            background-color:  #63a8d3;\n            color:  #000000;\n        }</style><table id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >0</th>        <th class=\"col_heading level0 col1\" >1</th>    </tr></thead><tbody>\n                <tr>\n                        <th id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722level0_row0\" class=\"row_heading level0 row0\" >0</th>\n                        <td id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722row0_col0\" class=\"data row0 col0\" >28658</td>\n                        <td id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722row0_col1\" class=\"data row0 col1\" >600</td>\n            </tr>\n            <tr>\n                        <th id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722level0_row1\" class=\"row_heading level0 row1\" >1</th>\n                        <td id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722row1_col0\" class=\"data row1 col0\" >1241</td>\n                        <td id=\"T_49a10e1a_3b5b_11eb_9907_000d3a13a722row1_col1\" class=\"data row1 col1\" >2451</td>\n            </tr>\n    </tbody></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 20,
      "metadata": {
        "gather": {
          "logged": 1607654883100
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Publish and run from REST endpoint\n",
        "\n",
        "Run the following code to publish the pipeline to your workspace. In your workspace in the portal, you can see metadata for the pipeline including run history and durations. You can also run the pipeline manually from the portal.\n",
        "\n",
        "Additionally, publishing the pipeline enables a REST endpoint to rerun the pipeline from any HTTP library on any platform.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "published_pipeline = pipeline_run.publish_pipeline(\n",
        "    name=\"Bankmarketing Train\", description=\"Training bankmarketing pipeline\", version=\"1.0\")\n",
        "\n",
        "published_pipeline\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "Pipeline(Name: Bankmarketing Train,\nId: 6266430b-f51a-4c23-83ec-32986cfe19dd,\nStatus: Active,\nEndpoint: https://eastus.api.azureml.ms/pipelines/v1.0/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourceGroups/RGML/providers/Microsoft.MachineLearningServices/workspaces/WML/PipelineRuns/PipelineSubmit/6266430b-f51a-4c23-83ec-32986cfe19dd)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Id</th><th>Status</th><th>Endpoint</th></tr><tr><td>Bankmarketing Train</td><td><a href=\"https://ml.azure.com/pipelines/6266430b-f51a-4c23-83ec-32986cfe19dd?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\" target=\"_blank\" rel=\"noopener\">6266430b-f51a-4c23-83ec-32986cfe19dd</a></td><td>Active</td><td><a href=\"https://eastus.api.azureml.ms/pipelines/v1.0/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourceGroups/RGML/providers/Microsoft.MachineLearningServices/workspaces/WML/PipelineRuns/PipelineSubmit/6266430b-f51a-4c23-83ec-32986cfe19dd\" target=\"_blank\" rel=\"noopener\">REST Endpoint</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21,
      "metadata": {
        "gather": {
          "logged": 1607654883464
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Authenticate once again, to retrieve the `auth_header` so that the endpoint can be used"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.authentication import InteractiveLoginAuthentication\n",
        "\n",
        "interactive_auth = InteractiveLoginAuthentication()\n",
        "auth_header = interactive_auth.get_authentication_header()\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 31,
      "metadata": {
        "gather": {
          "logged": 1607732288967
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Get the REST url from the endpoint property of the published pipeline object. You can also find the REST url in your workspace in the portal. Build an HTTP POST request to the endpoint, specifying your authentication header. Additionally, add a JSON payload object with the experiment name and the batch size parameter. As a reminder, the process_count_per_node is passed through to ParallelRunStep because you defined it is defined as a PipelineParameter object in the step configuration.\n",
        "\n",
        "Make the request to trigger the run. Access the Id key from the response dict to get the value of the run id.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "rest_endpoint = published_pipeline.endpoint\n",
        "response = requests.post(rest_endpoint, \n",
        "                         headers=auth_header, \n",
        "                         json={\"ExperimentName\": \"pipeline-rest-endpoint\"}\n",
        "                        )"
      ],
      "outputs": [],
      "execution_count": 32,
      "metadata": {
        "gather": {
          "logged": 1607732296491
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    response.raise_for_status()\n",
        "except Exception:    \n",
        "    raise Exception(\"Received bad response from the endpoint: {}\\n\"\n",
        "                    \"Response Code: {}\\n\"\n",
        "                    \"Headers: {}\\n\"\n",
        "                    \"Content: {}\".format(rest_endpoint, response.status_code, response.headers, response.content))\n",
        "\n",
        "run_id = response.json().get('Id')\n",
        "print('Submitted pipeline run: ', run_id)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Submitted pipeline run:  d53ce119-880b-4e85-a12f-4dd421a2cbe3\n"
          ]
        }
      ],
      "execution_count": 33,
      "metadata": {
        "gather": {
          "logged": 1607732298912
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Use the run id to monitor the status of the new run. This will take another 10-15 min to run and will look similar to the previous pipeline run, so if you don't need to see another pipeline run, you can skip watching the full output."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core.run import PipelineRun\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "published_pipeline_run = PipelineRun(ws.experiments[\"pipeline-rest-endpoint\"], run_id)\n",
        "RunDetails(published_pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a9ed7d62adfe486c90085a21769615d5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/experiments/pipeline-rest-endpoint/runs/8377fcf0-a7da-4a78-ae20-8405d722d1d7?wsid=/subscriptions/7fd26112-9993-4423-b5d3-83ab3e0aeae4/resourcegroups/RGML/workspaces/WML\", \"run_id\": \"8377fcf0-a7da-4a78-ae20-8405d722d1d7\", \"run_properties\": {\"run_id\": \"8377fcf0-a7da-4a78-ae20-8405d722d1d7\", \"created_utc\": \"2020-12-11T02:48:05.624434Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"Unavailable\", \"runType\": \"HTTP\", \"azureml.parameters\": \"{}\", \"azureml.pipelineid\": \"6266430b-f51a-4c23-83ec-32986cfe19dd\"}, \"tags\": {\"azureml.pipelineid\": \"6266430b-f51a-4c23-83ec-32986cfe19dd\", \"azureml.pipelineComponent\": \"pipelinerun\"}, \"end_time_utc\": \"2020-12-11T03:08:39.245924Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.8377fcf0-a7da-4a78-ae20-8405d722d1d7/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=d%2BibfCNE%2Bhy8lXOZYj3X9879cRTqZIe0AAg3ZWKHqGs%3D&st=2020-12-11T23%3A49%3A07Z&se=2020-12-12T07%3A59%3A07Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.8377fcf0-a7da-4a78-ae20-8405d722d1d7/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=OtMAsSiW5QfR7nTlIcyXIQ2LYeNtKDjYs2o8pgNixoM%3D&st=2020-12-11T23%3A49%3A08Z&se=2020-12-12T07%3A59%3A08Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://wml0847899576.blob.core.windows.net/azureml/ExperimentRun/dcid.8377fcf0-a7da-4a78-ae20-8405d722d1d7/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=Y1N1gWKIIzOV%2F%2BokWnB9lTzIriedqq2PK08krCkSwII%3D&st=2020-12-11T23%3A49%3A08Z&se=2020-12-12T07%3A59%3A08Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:20:33\"}, \"child_runs\": [{\"run_id\": \"962ebafe-6508-4dfd-8df7-aec83d1010f7\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2020-12-11T02:48:32.20131Z\", \"created_time\": \"2020-12-11T02:48:08.630468Z\", \"end_time\": \"2020-12-11T03:07:34.961913Z\", \"duration\": \"0:19:26\", \"run_number\": 94, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2020-12-11T02:48:08.630468Z\", \"is_reused\": \"\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2020-12-11 02:48:08Z] Submitting 1 runs, first five are: 320b0425:962ebafe-6508-4dfd-8df7-aec83d1010f7\\n[2020-12-11 03:08:39Z] Completing processing run id 962ebafe-6508-4dfd-8df7-aec83d1010f7.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"1495e429\": {\"node_id\": \"1495e429\", \"name\": \"bankmarketing_train\"}}, \"module_nodes\": {\"320b0425\": {\"node_id\": \"320b0425\", \"name\": \"automl_module\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"962ebafe-6508-4dfd-8df7-aec83d1010f7\"}}, \"edges\": [{\"source_node_id\": \"1495e429\", \"source_node_name\": \"bankmarketing_train\", \"source_name\": \"data\", \"target_name\": \"training_data\", \"dst_node_id\": \"320b0425\", \"dst_node_name\": \"automl_module\"}], \"child_runs\": [{\"run_id\": \"962ebafe-6508-4dfd-8df7-aec83d1010f7\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2020-12-11T02:48:32.20131Z\", \"created_time\": \"2020-12-11T02:48:08.630468Z\", \"end_time\": \"2020-12-11T03:07:34.961913Z\", \"duration\": \"0:19:26\", \"run_number\": 94, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2020-12-11T02:48:08.630468Z\", \"is_reused\": \"\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.18.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1607654888141
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "order_index": 11,
    "exclude_from_index": false,
    "task": "Demonstrates the use of AutoMLStep",
    "deployment": [
      "None"
    ],
    "authors": [
      {
        "name": "sanpil"
      }
    ],
    "star_tag": [
      "featured"
    ],
    "kernel_info": {
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "compute": [
      "AML Compute"
    ],
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "tags": [
      "None"
    ],
    "datasets": [
      "Custom"
    ],
    "categories": [
      "how-to-use-azureml",
      "machine-learning-pipelines",
      "intro-to-pipelines"
    ],
    "category": "tutorial",
    "framework": [
      "Automated Machine Learning"
    ],
    "friendly_name": "How to use AutoMLStep with AML Pipelines",
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}